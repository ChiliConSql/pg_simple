{"name":"Pg simple","tagline":"A simple wrapper over psycopg2 with support for common SQL functions","body":"# pg_simple\r\n\r\nAn ultra simple wrapper over Python psycopg2 with support for basic SQL functionality.\r\n\r\n## Installation\r\n\r\nWith `pip` or `easy_install`:\r\n\r\n```pip install pg_simple```\r\n\r\nor:\r\n\r\n```easy_install pg_simple```\r\n\r\nor from the source:\r\n\r\n```python setup.py install```\r\n\r\n## Basic Usage\r\n\r\n### Initializing the connection pool:\r\n\r\n```python\r\nimport pg_simple\r\n\r\npg_simple.config_pool(max_conn=5,\r\n                      expiration=1, # idle timeout = 1 minute\r\n                      host='localhost',\r\n                      port=5432,\r\n                      database='pg_simple',\r\n                      user='postgres',\r\n                      password='secret')\r\n```\r\n\r\nor, using `dsn`:\r\n\r\n```python\r\npg_simple.config_pool(max_conn=5,\r\n                      expiration=1,\r\n                      dsn='dbname=pg_simple user=postgres password=secret')\r\n\r\n```\r\n\r\nor, using `db_url`:\r\n\r\n```python\r\npg_simple.config_pool(max_conn=5,\r\n                      expiration=1,\r\n                      db_url= 'postgres://username:password@hostname:port/database')\r\n\r\n```\r\n\r\n\r\n### Connecting to the posgtresql server:\r\n\r\n```python\r\nimport sys\r\nimport pg_simple\r\n\r\ndb = pg_simple.PgSimple(log=sys.stdout,\r\n                        log_fmt=lambda x: '>> %s' % (x if isinstance(x, str) else x.query),\r\n                        nt_cursor=True)\r\n```\r\n\r\n### Raw SQL execution:\r\n\r\n```python\r\n>>> db.execute('SELECT tablename FROM pg_tables WHERE schemaname=%s and tablename=%s', ['public', 'books'])\r\n<cursor object at 0x102352a50; closed: 0>\r\n```\r\n\r\n### Dropping and creating tables:\r\n\r\n```python\r\ndb.drop('books')\r\n\r\ndb.create('books',\r\n          '''\r\n\"id\" SERIAL NOT NULL,\r\n\"type\" VARCHAR(20) NOT NULL,\r\n\"name\" VARCHAR(40) NOT NULL,\r\n\"price\" MONEY NOT NULL,\r\n\"published\" DATE NOT NULL,\r\n\"modified\" TIMESTAMP(6) NOT NULL DEFAULT now()\r\n'''\r\n)\r\n\r\ndb.execute('''ALTER TABLE \"books\" ADD CONSTRAINT \"books_pkey\" PRIMARY KEY (\"id\")''')\r\n\r\n```\r\n\r\n### Emptying a table or set of tables:\r\n\r\n```python\r\ndb.truncate('tbl1')\r\ndb.truncate('tbl2, tbl3', restart_identity=True, cascade=True)\r\ndb.commit()\r\n```\r\n\r\n### Inserting a row:\r\n\r\n```python\r\nfor i in range(1, 10):\r\n    db.insert(\"books\",\r\n              {\"genre\": \"fiction\",\r\n               \"name\": \"Book Name vol. %d\" % i,\r\n               \"price\": 1.23 * i,\r\n               \"published\": \"%d-%d-1\" % (2000 + i, i)})\r\n\r\ndb.commit()\r\n```\r\n\r\n### Updating rows:\r\n\r\n```python\r\nwith pg_simple.PgSimple() as db1:\r\n    db1.update('books',\r\n               data={'name': 'An expensive book',\r\n                     'price': 998.997,\r\n                     'genre': 'non-fiction',\r\n                     'modified': 'NOW()'},\r\n               where=('published = %s', [datetime.date(2001, 1, 1)]))\r\n               \r\n    db1.commit()\r\n```\r\n\r\n### Deleting rows:\r\n\r\n```python\r\ndb.delete('books', where=('published >= %s', [datetime.date(2005, 1, 31)]))\r\ndb.commit()\r\n```\r\n\r\n### Inserting/updating/deleting rows with return value:\r\n\r\n```python\r\nrow = db.insert(\"books\",\r\n                {\"type\": \"fiction\",\r\n                 \"name\": \"Book with ID\",\r\n                 \"price\": 123.45,\r\n                 \"published\": \"1997-01-31\"},\r\n                returning='id')\r\nprint(row.id)\r\n\r\nrows = db.update('books',\r\n                 data={'name': 'Another expensive book',\r\n                       'price': 500.50,\r\n                       'modified': 'NOW()'},\r\n                 where=('published = %s', [datetime.date(2006, 6, 1)]),\r\n                 returning='modified')\r\nprint(rows[0].modified)\r\n\r\nrows = db.delete('books', \r\n                 where=('published >= %s', [datetime.date(2005, 1, 31)]), \r\n                 returning='name')\r\nfor r in rows:\r\n    print(r.name)\r\n```\r\n\r\n### Fetching a single record:\r\n\r\n```python\r\nbook = db.fetchone('books', \r\n                   fields=['name', 'published'], \r\n                   where=('published = %s', [datetime.date(2002, 2, 1)]))\r\n                   \r\nprint(book.name + 'was published on ' + book[1])\r\n```\r\n\r\n### Fetching multiple records:\r\n\r\n```python\r\nbooks = db.fetchall('books',\r\n                    fields=['name AS n', 'genre AS g'],\r\n                    where=('published BETWEEN %s AND %s', [datetime.date(2005, 2, 1), datetime.date(2009, 2, 1)]),\r\n                    order=['published', 'DESC'], \r\n                    limit=5, \r\n                    offset=2)\r\n\r\nfor book in books:\r\n    print(book.n + 'belongs to ' + book[1])\r\n```\r\n\r\n### Database transactions:\r\n\r\n```python\r\nwith pg_simple.PgSimple() as _db:\r\n    try:\r\n        _db.execute('Some SQL statement')\r\n        _db.commit()\r\n    except:\r\n        _db.rollback()\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}